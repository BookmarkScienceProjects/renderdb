// Code generated by go-bindata.
// sources:
// migrations/0001-initial.sql
// migrations/0002-worlds.sql
// migrations/0003-layers.sql
// migrations/0004-scenes.sql
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001InitialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xd1\xd1\x6a\x83\x30\x14\x06\xe0\xfb\x3c\xc5\xb9\xdc\xd8\xfa\x04\xbd\x8a\xeb\x59\x09\x4b\x93\x12\x8f\xb0\x5e\x49\x3a\x43\x71\xa0\x19\x9a\x31\xf5\xe9\x17\x64\xc8\x50\x36\x34\xd7\x5f\xf2\xff\xe4\xdf\xed\xe0\xa1\x2a\x6f\x8d\x0d\x0e\xb2\x0f\xf6\x64\x90\x13\x02\xf1\x44\x22\x88\x67\x50\x9a\x00\x5f\x45\x4a\x29\xdc\x9c\xaf\x5c\x68\xfa\xdc\x5f\xdf\xdd\x5b\x68\xef\x18\xcc\x4e\x59\x80\x50\x84\x47\x34\x70\x36\xe2\xc4\xcd\x05\x5e\xf0\x02\x3c\x23\x2d\x54\x7c\xf9\x84\x8a\x1e\x17\xb7\xae\xfe\xb3\x2e\xda\xbc\xcb\xab\xb2\x86\x18\x2f\xc7\x50\x95\x49\xf9\xa7\xed\x37\xd8\x61\x83\x8d\x1d\x6c\xb7\xbe\xc3\x6a\x3b\xac\xb1\xd3\xff\x16\x36\x58\x48\xa4\x4e\xfe\xc1\x51\xda\xd1\xa5\x64\x84\x3a\x4e\xf2\x7e\xbf\xa0\xec\xf7\xc4\x07\xff\x55\xb3\x83\xd1\xe7\x9f\x89\xe7\xa3\xee\xbf\x03\x00\x00\xff\xff\xee\x02\x88\xe6\x10\x02\x00\x00")

func migrations0001InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001InitialSql,
		"migrations/0001-initial.sql",
	)
}

func migrations0001InitialSql() (*asset, error) {
	bytes, err := migrations0001InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-initial.sql", size: 528, mode: os.FileMode(420), modTime: time.Unix(1456782392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002WorldsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\xcf\x2f\xca\x49\x29\xd6\xe0\x52\x00\x82\xcc\x14\x05\x4f\xbf\x10\x57\x77\xd7\x20\x85\x80\x20\x4f\x5f\xc7\xa0\x48\x05\x6f\xd7\x48\x05\xc7\xd0\x10\x7f\x4f\x3f\xa0\x2e\x5f\x57\xbf\x10\x1d\xb0\xca\xbc\xc4\xdc\x54\x05\xa0\x31\x3e\x0a\x7e\xfe\x21\x0a\x7e\xa1\x3e\x3e\x9a\xd6\x5c\x5c\xc8\xf6\xb8\xe4\x97\xe7\x71\xb9\x04\xf9\x07\xa0\xd8\x63\x0d\x08\x00\x00\xff\xff\xb0\x66\x50\xc8\x8b\x00\x00\x00")

func migrations0002WorldsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002WorldsSql,
		"migrations/0002-worlds.sql",
	)
}

func migrations0002WorldsSql() (*asset, error) {
	bytes, err := migrations0002WorldsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-worlds.sql", size: 139, mode: os.FileMode(420), modTime: time.Unix(1456782392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003LayersSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xcd\xaa\x83\x40\x0c\x46\xf7\xf3\x14\x59\x2a\xf7\xfa\x04\xae\xa6\x1a\x65\xe8\x98\x91\x34\x2e\x5c\x15\x41\x29\x82\x3f\x45\x0b\xd2\xb7\xef\xb4\x52\xda\x66\x79\x38\x39\x7c\x51\x04\x7f\x63\x7f\x59\x9a\x5b\x07\xd5\x55\x25\x8c\x5a\x10\x44\x1f\x2c\xc2\xd0\xdc\xbb\x65\x0d\x14\xf8\xeb\x5b\x30\x24\x98\x23\x43\xc9\xa6\xd0\x5c\xc3\x11\x6b\xd0\x95\x38\x43\xfe\xab\x40\x92\xff\x97\xb9\xcd\xcb\xd0\x9e\x3f\xfe\x4e\xa7\x66\xec\xc0\xc7\x2d\x90\x13\xa0\xca\xda\x9d\x67\x8e\xd1\xe4\xf4\x8c\x05\xef\xcf\xd0\x8b\x19\x32\x52\x82\xa7\x3d\xb7\x06\x9e\xaa\x30\x56\xea\x7b\x6f\x3a\x6f\x93\x4a\xd9\x95\x3f\x7b\xe3\x47\x00\x00\x00\xff\xff\x71\xb5\x7d\x5d\xd3\x00\x00\x00")

func migrations0003LayersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003LayersSql,
		"migrations/0003-layers.sql",
	)
}

func migrations0003LayersSql() (*asset, error) {
	bytes, err := migrations0003LayersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-layers.sql", size: 211, mode: os.FileMode(420), modTime: time.Unix(1456953418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0004ScenesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xc1\x0a\x82\x40\x10\x86\xef\xfb\x14\x73\x54\xca\x27\xf0\xb4\xe9\x28\x4b\xeb\xac\x4c\xe3\xc1\x53\x48\x2d\x21\xa4\x85\x06\xd1\xdb\xb7\x28\x51\xcd\xf1\xe3\x9b\x8f\x3f\x49\x60\x33\xf4\x97\xa9\x7b\x78\x68\xee\x2a\x63\xd4\x82\x20\x7a\x67\x11\xe6\x93\x1f\xfd\x1c\x29\x08\xd7\x9f\xc1\x90\x60\x89\x0c\x35\x9b\x4a\x73\x0b\x7b\x6c\x41\x37\xe2\x0c\x85\xaf\x0a\x49\xb6\x8b\x79\xed\x5e\x7e\x3a\x7e\xfd\x95\x8e\xdd\xe0\x21\xc4\x2d\x90\x13\xa0\xc6\xda\x95\x17\x8e\xd1\x94\xb4\xc4\xa2\xcf\x6b\x1c\xcc\x02\x19\x29\xc3\xc3\xda\x9b\xa3\x40\x55\x9c\x2a\xf5\x3b\x38\xbf\x3d\x47\x95\xb3\xab\xff\x06\xa7\xef\x00\x00\x00\xff\xff\x8e\xea\xd6\xd7\xd4\x00\x00\x00")

func migrations0004ScenesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0004ScenesSql,
		"migrations/0004-scenes.sql",
	)
}

func migrations0004ScenesSql() (*asset, error) {
	bytes, err := migrations0004ScenesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0004-scenes.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1456953496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-initial.sql": migrations0001InitialSql,
	"migrations/0002-worlds.sql": migrations0002WorldsSql,
	"migrations/0003-layers.sql": migrations0003LayersSql,
	"migrations/0004-scenes.sql": migrations0004ScenesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-initial.sql": &bintree{migrations0001InitialSql, map[string]*bintree{}},
		"0002-worlds.sql": &bintree{migrations0002WorldsSql, map[string]*bintree{}},
		"0003-layers.sql": &bintree{migrations0003LayersSql, map[string]*bintree{}},
		"0004-scenes.sql": &bintree{migrations0004ScenesSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

